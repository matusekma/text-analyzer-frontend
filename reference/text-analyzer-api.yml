openapi: 3.0.1
info:
  title: Text Analyzer
  description: ''
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: auth
    description: Operations about authentication and authorization
  - name: pipelines
    description: Operations about pipelines
  - name: jobs
    description: Operations about jobs
  - name: ASR
    description: Operations about Automatic Speech Recognition
  - name: uploads
    description: Operations about uploads
  - name: labels
    description: Operations about labels
paths:
  /me:
    get:
      tags:
        - auth
      summary: Get current user
      operationId: getCurrentUser
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /login:
    post:
      tags:
        - auth
      summary: Login
      operationId: login
      requestBody:
        description: Login credentials 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
        405:
          description: Validation exception
          content: {}
  /logout:
    post:
      tags:
        - auth
      summary: Logout
      operationId: logout
      responses:
        200:
          description: OK
  /register:
    post:
      tags:
        - auth
      summary: Register
      operationId: register
      requestBody:
        description: Registration data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationResponse'
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
        405:
          description: Validation exception
          content: {}
  /asr:
    post:
      tags:
        - ASR
      summary: Upload audio for ASR
      operationId: asr
      parameters:
        - in: query
          name: language
          schema:
            $ref: '#/components/schemas/Language'
          description: Language of the audio
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AsrRequest'
      responses:
        200:
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsrResult'
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
        405:
          description: Validation exception
          content: {}
  /uploads:
    post:
      tags:
        - uploads
      summary: Upload text
      operationId: uploadText
      requestBody:
        description: The text and its metadata to be uploaded
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadTextRequest'
        required: true
      responses:
        201:
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadTextResponse'
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
        405:
          description: Validation exception
          content: {}
    get:
      tags:
        - uploads
      summary: Get uploads of the logged in user
      operationId: getUploads
      parameters:
        - $ref: '#/components/parameters/PageQueryParam'
        - $ref: '#/components/parameters/PageSizeQueryParam'
        - $ref: '#/components/parameters/SortQueryParam'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadPage'
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
        405:
          description: Validation exception
          content: {}
  /uploads/{uploadId}:
    get:
      tags:
        - uploads
      summary: Get upload
      operationId: getUpload
      parameters:
        - $ref: '#/components/parameters/UploadIdPathParam'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadDetailsResponse'
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
    put:
      tags:
        - uploads
      summary: Edit upload
      operationId: editUpload
      parameters:
        - $ref: '#/components/parameters/UploadIdPathParam'
      requestBody:
        description: The new upload data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUploadRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditUploadResponse'
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
        405:
          description: Validation exception
          content: {}
    delete:
      tags:
        - uploads
      summary: Delete upload
      operationId: deleteUpload
      parameters:
        - $ref: '#/components/parameters/UploadIdPathParam'
      responses:
        200:
          description: OK
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
        405:
          description: Validation exception
          content: {}
  /labels:
    post:
      tags:
        - labels
      summary: Create a new label for a user
      operationId: createLabel
      requestBody:
        description: Label data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLabelRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLabelResponse'
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
        405:
          description: Validation exception
          content: {}
    get:
      tags:
        - labels
      summary: Get the labels of the logged in user
      operationId: getLabels
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LabelResponse'
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
        405:
          description: Validation exception
          content: {}
  /pipelines:
    get:
      tags:
        - pipelines
      summary: Get pipelines of the logged in user
      operationId: getPipelines
      parameters:
        - $ref: '#/components/parameters/PageQueryParam'
        - $ref: '#/components/parameters/PageSizeQueryParam'
        - $ref: '#/components/parameters/SortQueryParam'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelinePage'
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
        405:
          description: Validation exception
          content: {}
    post:
      tags:
        - pipelines
      summary: Launch a pipeline
      operationId: launchPipeline
      requestBody:
        description: Settings for the pipeline
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PipelineStartRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineResultResponse'
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
        - textanalyzer_auth:
            - executor.task
  /jobs:
    post:
      tags:
        - jobs
      summary: Run a single job
      operationId: runJob
      requestBody:
        description: Settings for the job
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SingleJobStartRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleJobResultResponse'
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
        - textanalyzer_auth:
            - executor.task
      
components:
  schemas:

    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/UserResponse'
    
    UserResponse:
      type: object
      properties:
        id:
          type: integer  
        username:
          type: string
        email:
          type: string
        role:
          $ref: '#/components/schemas/Role'
  
    Role:
      type: string
      enum:
        - USER
      
    RegistrationRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - username
        - email
        - password
  
    RegistrationResponse:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        
  
    UploadTextRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        text:
          type: string
        labelIds:
          type: array
          items:
            type: number
      required:
        - name
        - description
        - text
        - labelIds

    UploadTextResponse:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        name:
          type: string
        description:
          type: string
        text:
          type: string
        labelIds:
          type: array
          items:
            type: number

    EditUploadRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        text:
          type: string
        labelIds:
          type: array
          items:
            type: number
      required:
        - name
        - description
        - text
        - labelIds

    EditUploadResponse:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        name:
          type: string
        description:
          type: string
        text:
          type: string
        labelIds:
          type: array
          items:
            type: number

    UploadPage:
      allOf:
        - $ref: '#/components/schemas/PageData'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/UploadResponse'

    UploadResponse:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        labelIds:
          type: array
          items:
            type: number

    UploadDetailsResponse:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        name:
          type: string
        description:
          type: string
        text:
          type: string
        createdAt:
          type: string
          format: date-time
        labelIds:
          type: array
          items:
            type: number

    CreateLabelRequest:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    CreateLabelResponse:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        name:
          type: string

    LabelResponse:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        name:
          type: string

    SingleJobStartRequest:
      type: object
      properties:
        uploadId:
          type: integer
        language:
          $ref: '#/components/schemas/Language'
        job:
          $ref: '#/components/schemas/SingleJobType'
      required:
        - uploadId
        - job

    PipelinePage:
      allOf:
        - $ref: '#/components/schemas/PageData'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/PipelineResponse'

    PipelineResponse:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        name:
          type: string
        language:
          $ref: '#/components/schemas/Language'
        uploadId:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/JobType'

    PipelineStartRequest:
      type: object
      properties:
        uploadId:
          type: integer
        name:
          type: string
        language:
          $ref: '#/components/schemas/Language'
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/JobType'
        options:
          type: object
          properties:
            SENTIMENT_ANALYSIS:
              type: object
              additionalProperties:
                type: string
            POS_TAG:
              type: object
              additionalProperties:
                type: string
            KEYWORD_EXTRACTION:
              type: object
              additionalProperties:
                type: string 
            NER:
              type: object
              additionalProperties:
                type: string    
            SUMMARIZATION:
              type: object
              additionalProperties:
                type: string                              
      required:
        - uploadId
        - name
        - language
        - jobs

    JobType:
      type: string
      enum:
        - SENTIMENT_ANALYSIS
        - POS_TAG
        - KEYWORD_EXTRACTION
        - NER
        - SUMMARIZATION

    SingleJobType:
      type: string
      enum:
        - LANGUAGE_DETECTION
        - PROFANITY_FILTER
        - PUNCTUATION_RESTORATION

    Language:
      type: string
      enum:
        - EN
        - DE

    SingleJobResultResponse:
      type: object
      properties:
        uploadId:
          type: integer
        result:
          $ref: '#/components/schemas/SingleJobResult'

    PipelineResultResponse:
      type: object
      properties:
        id:
          type: integer
        uploadId:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/JobResult'

    SingleJobResult:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/SingleJobType'
        isFailed:
          type: boolean
        result:
          oneOf:
            - $ref: '#/components/schemas/ProfanityFilterResult'
            - $ref: '#/components/schemas/LanguageDetectionResult'
            - $ref: '#/components/schemas/PunctuationRestorationResult'
            - $ref: '#/components/schemas/FailedSingleJobResult'

    JobResult:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/JobType'
        isFailed:
          type: boolean
        result:
          oneOf:
            - $ref: '#/components/schemas/SentimentAnalysisResult'
            - $ref: '#/components/schemas/PosTaggingResult'
            - $ref: '#/components/schemas/KeywordExtractionResult'
            - $ref: '#/components/schemas/NERResult'
            - $ref: '#/components/schemas/SummarizationResult'
            - $ref: '#/components/schemas/FailedPipelineJobResult'

    SentimentAnalysisResult:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/SentenceSentimentResult'

    SentenceSentimentResult:
      type: object
      properties:
        sentence:
          type: string
        sentiment:
          type: string
        confidence:
          type: number

    KeywordExtractionResult:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/KeywordResultEntity'


    KeywordResultEntity:
      type: object
      properties:
        keyword:
          type: string
        score:
          type: number
      required:
        - keyword
        - score

    NERResult:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/NERResultEntity'
    
    NERResultEntity:
      type: object
      properties:
        text:
          type: string
        label:
          type: string

    PosTaggingResult:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/PosTaggingResultEntity'
    
    PosTaggingResultEntity:
      type: object
      properties:
        text:
          type: string
        lemma:
          type: string
        tag: 
          type: string

    SummarizationResult:
      type: object
      properties:
        results:
          type: array
          items: 
            type: string

    FailedPipelineJobResult:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/JobType'
        error:
          type: string

    ProfanityFilterResult:
      type: object
      properties:
        filteredText:
          type: string

    LanguageDetectionResult:
      type: object
      properties:
        languages:
          type: array
          items:
            type: string
        confidences:
          type: array
          items:
            type: number

    PunctuationRestorationResult:
      type: object
      properties:
        restoredText:
          type: string

    FailedSingleJobResult:
      type: object
      properties:
        error:
          type: string

    AsrRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
      required:
        - file  

    AsrResult:
      type: object
      properties:
        text:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        password:
          type: string

    PageData:
      type: object
      properties:
        empty:
          description: Indicates whether the result set is empty
          example: false
          type: boolean
        first:
          description: Indicates whether this is the first page
          example: true
          type: boolean
        last:
          description: Indicates whether this is the last page
          example: true
          type: boolean
        number:
          description: Page number showed
          example: 1
          type: number
          format: int
        numberOfElements:
          description: Number of elements present on the page
          example: 10
          type: number
          format: int
        size:
          description: Page size
          example: 10
          type: number
          format: int
        totalElements:
          description: Number of elements in the result set (not just on the page)
          example: 76
          type: number
          format: int
        totalPages:
          description: Number of pages in the result set
          example: 8
          type: number
          format: int
      
  parameters:

    UploadIdPathParam:
      in: path
      name: uploadId
      schema:
        type: integer
      required: true
      description: Id of the upload

    PageQueryParam:
      in: query
      name: page
      schema:
        type: integer
      required: true
      description: Page number requested

    PageSizeQueryParam:
      in: query
      name: size
      schema:
        type: integer
      required: true
      description: Page size requested

    SortQueryParam:
      in: query
      name: sort
      schema:
        type: string
      required: false
      example: name,ASC
      description: Sort property and order

  securitySchemes:
    textanalyzer_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://swagger.io/oauth/dialog
          scopes:
            executor.task: execute pipeline or task
    api_key:
      type: apiKey
      name: api_key
      in: header