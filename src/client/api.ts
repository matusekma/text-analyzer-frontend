/* tslint:disable */
/* eslint-disable */
/**
 * Text Analyzer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface JobResult
 */
export interface JobResult {
    /**
     * 
     * @type {JobType}
     * @memberof JobResult
     */
    name?: JobType;
    /**
     * 
     * @type {SentimentAnalysisResult | PosTaggingResult | KeywordExtractionResult | NERResult}
     * @memberof JobResult
     */
    result?: SentimentAnalysisResult | PosTaggingResult | KeywordExtractionResult | NERResult;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum JobType {
    SentimentAnalysis = 'SENTIMENT_ANALYSIS',
    PosTag = 'POS_TAG',
    KeywordExtraction = 'KEYWORD_EXTRACTION',
    Ner = 'NER'
}

/**
 * 
 * @export
 * @interface KeywordExtractionResult
 */
export interface KeywordExtractionResult {
    /**
     * 
     * @type {Array<string>}
     * @memberof KeywordExtractionResult
     */
    keywords?: Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum Language {
    Eng = 'ENG',
    Ger = 'GER'
}

/**
 * 
 * @export
 * @interface LanguageDetectionResult
 */
export interface LanguageDetectionResult {
    /**
     * 
     * @type {number}
     * @memberof LanguageDetectionResult
     */
    eng?: number;
    /**
     * 
     * @type {number}
     * @memberof LanguageDetectionResult
     */
    ger?: number;
    /**
     * 
     * @type {number}
     * @memberof LanguageDetectionResult
     */
    other?: number;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    token?: string;
    /**
     * 
     * @type {UserResponse}
     * @memberof LoginResponse
     */
    user?: UserResponse;
}
/**
 * 
 * @export
 * @interface NERResult
 */
export interface NERResult {
    /**
     * 
     * @type {string}
     * @memberof NERResult
     */
    taggedText?: string;
}
/**
 * 
 * @export
 * @interface PipelineResultResponse
 */
export interface PipelineResultResponse {
    /**
     * 
     * @type {number}
     * @memberof PipelineResultResponse
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof PipelineResultResponse
     */
    uploadId?: number;
    /**
     * 
     * @type {Array<JobResult>}
     * @memberof PipelineResultResponse
     */
    results?: Array<JobResult>;
}
/**
 * 
 * @export
 * @interface PipelineStartRequest
 */
export interface PipelineStartRequest {
    /**
     * 
     * @type {number}
     * @memberof PipelineStartRequest
     */
    uploadId?: number;
    /**
     * 
     * @type {Language}
     * @memberof PipelineStartRequest
     */
    language?: Language;
    /**
     * 
     * @type {Array<JobType>}
     * @memberof PipelineStartRequest
     */
    jobs?: Array<JobType>;
}
/**
 * 
 * @export
 * @interface PosTaggingResult
 */
export interface PosTaggingResult {
    /**
     * 
     * @type {string}
     * @memberof PosTaggingResult
     */
    taggedText?: string;
}
/**
 * 
 * @export
 * @interface ProfanityFilterResult
 */
export interface ProfanityFilterResult {
    /**
     * 
     * @type {string}
     * @memberof ProfanityFilterResult
     */
    filteredText?: string;
}
/**
 * 
 * @export
 * @interface PunctuationRestorationResult
 */
export interface PunctuationRestorationResult {
    /**
     * 
     * @type {string}
     * @memberof PunctuationRestorationResult
     */
    restoredText?: string;
}
/**
 * 
 * @export
 * @interface RegistrationRequest
 */
export interface RegistrationRequest {
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface RegistrationResponse
 */
export interface RegistrationResponse {
    /**
     * 
     * @type {number}
     * @memberof RegistrationResponse
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof RegistrationResponse
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationResponse
     */
    email?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum Role {
    User = 'USER'
}

/**
 * 
 * @export
 * @interface SentimentAnalysisResult
 */
export interface SentimentAnalysisResult {
    /**
     * 
     * @type {number}
     * @memberof SentimentAnalysisResult
     */
    positive?: number;
    /**
     * 
     * @type {number}
     * @memberof SentimentAnalysisResult
     */
    negative?: number;
}
/**
 * 
 * @export
 * @interface SingleJobResult
 */
export interface SingleJobResult {
    /**
     * 
     * @type {SingleJobType}
     * @memberof SingleJobResult
     */
    name?: SingleJobType;
    /**
     * 
     * @type {ProfanityFilterResult | LanguageDetectionResult | PunctuationRestorationResult}
     * @memberof SingleJobResult
     */
    result?: ProfanityFilterResult | LanguageDetectionResult | PunctuationRestorationResult;
}
/**
 * 
 * @export
 * @interface SingleJobResultResponse
 */
export interface SingleJobResultResponse {
    /**
     * 
     * @type {number}
     * @memberof SingleJobResultResponse
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof SingleJobResultResponse
     */
    uploadId?: number;
    /**
     * 
     * @type {SingleJobResult}
     * @memberof SingleJobResultResponse
     */
    result?: SingleJobResult;
}
/**
 * 
 * @export
 * @interface SingleJobStartRequest
 */
export interface SingleJobStartRequest {
    /**
     * 
     * @type {number}
     * @memberof SingleJobStartRequest
     */
    uploadId?: number;
    /**
     * 
     * @type {SingleJobType}
     * @memberof SingleJobStartRequest
     */
    job?: SingleJobType;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum SingleJobType {
    LanguageDetection = 'LANGUAGE_DETECTION',
    ProfanityFilter = 'PROFANITY_FILTER',
    PunctuationRestoration = 'PUNCTUATION_RESTORATION'
}

/**
 * 
 * @export
 * @interface UploadTextRequest
 */
export interface UploadTextRequest {
    /**
     * 
     * @type {string}
     * @memberof UploadTextRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UploadTextRequest
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof UploadTextRequest
     */
    text: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UploadTextRequest
     */
    labels: Array<string>;
}
/**
 * 
 * @export
 * @interface UploadTextResponse
 */
export interface UploadTextResponse {
    /**
     * 
     * @type {string}
     * @memberof UploadTextResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadTextResponse
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadTextResponse
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadTextResponse
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadTextResponse
     */
    text?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UploadTextResponse
     */
    labels?: Array<string>;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {number}
     * @memberof UserResponse
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    email?: string;
    /**
     * 
     * @type {Role}
     * @memberof UserResponse
     */
    role?: Role;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {LoginRequest} loginRequest Login credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register
         * @param {RegistrationRequest} registrationRequest Registration data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (registrationRequest: RegistrationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrationRequest' is not null or undefined
            assertParamExists('register', 'registrationRequest', registrationRequest)
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registrationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login
         * @param {LoginRequest} loginRequest Login credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register
         * @param {RegistrationRequest} registrationRequest Registration data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(registrationRequest: RegistrationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(registrationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: any): AxiosPromise<UserResponse> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {LoginRequest} loginRequest Login credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest: LoginRequest, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register
         * @param {RegistrationRequest} registrationRequest Registration data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(registrationRequest: RegistrationRequest, options?: any): AxiosPromise<RegistrationResponse> {
            return localVarFp.register(registrationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getCurrentUser(options?: any) {
        return AuthApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {LoginRequest} loginRequest Login credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(loginRequest: LoginRequest, options?: any) {
        return AuthApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logout(options?: any) {
        return AuthApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register
     * @param {RegistrationRequest} registrationRequest Registration data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public register(registrationRequest: RegistrationRequest, options?: any) {
        return AuthApiFp(this.configuration).register(registrationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PipelinesApi - axios parameter creator
 * @export
 */
export const PipelinesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Run a pipeline
         * @param {PipelineStartRequest} pipelineStartRequest Settings for the pipeline
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPipeline: async (pipelineStartRequest: PipelineStartRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pipelineStartRequest' is not null or undefined
            assertParamExists('runPipeline', 'pipelineStartRequest', pipelineStartRequest)
            const localVarPath = `/pipelines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication textanalyzer_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "textanalyzer_auth", ["executor.task"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pipelineStartRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PipelinesApi - functional programming interface
 * @export
 */
export const PipelinesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PipelinesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Run a pipeline
         * @param {PipelineStartRequest} pipelineStartRequest Settings for the pipeline
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runPipeline(pipelineStartRequest: PipelineStartRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PipelineResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runPipeline(pipelineStartRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PipelinesApi - factory interface
 * @export
 */
export const PipelinesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PipelinesApiFp(configuration)
    return {
        /**
         * 
         * @summary Run a pipeline
         * @param {PipelineStartRequest} pipelineStartRequest Settings for the pipeline
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runPipeline(pipelineStartRequest: PipelineStartRequest, options?: any): AxiosPromise<PipelineResultResponse> {
            return localVarFp.runPipeline(pipelineStartRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PipelinesApi - object-oriented interface
 * @export
 * @class PipelinesApi
 * @extends {BaseAPI}
 */
export class PipelinesApi extends BaseAPI {
    /**
     * 
     * @summary Run a pipeline
     * @param {PipelineStartRequest} pipelineStartRequest Settings for the pipeline
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelinesApi
     */
    public runPipeline(pipelineStartRequest: PipelineStartRequest, options?: any) {
        return PipelinesApiFp(this.configuration).runPipeline(pipelineStartRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UploadsApi - axios parameter creator
 * @export
 */
export const UploadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Upload text
         * @param {UploadTextRequest} uploadTextRequest The text and its metadata to be uploaded
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadText: async (uploadTextRequest: UploadTextRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadTextRequest' is not null or undefined
            assertParamExists('uploadText', 'uploadTextRequest', uploadTextRequest)
            const localVarPath = `/uploads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication textanalyzer_auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "textanalyzer_auth", ["executor.task"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadTextRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadsApi - functional programming interface
 * @export
 */
export const UploadsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Upload text
         * @param {UploadTextRequest} uploadTextRequest The text and its metadata to be uploaded
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadText(uploadTextRequest: UploadTextRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadTextResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadText(uploadTextRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UploadsApi - factory interface
 * @export
 */
export const UploadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadsApiFp(configuration)
    return {
        /**
         * 
         * @summary Upload text
         * @param {UploadTextRequest} uploadTextRequest The text and its metadata to be uploaded
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadText(uploadTextRequest: UploadTextRequest, options?: any): AxiosPromise<UploadTextResponse> {
            return localVarFp.uploadText(uploadTextRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UploadsApi - object-oriented interface
 * @export
 * @class UploadsApi
 * @extends {BaseAPI}
 */
export class UploadsApi extends BaseAPI {
    /**
     * 
     * @summary Upload text
     * @param {UploadTextRequest} uploadTextRequest The text and its metadata to be uploaded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadsApi
     */
    public uploadText(uploadTextRequest: UploadTextRequest, options?: any) {
        return UploadsApiFp(this.configuration).uploadText(uploadTextRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


